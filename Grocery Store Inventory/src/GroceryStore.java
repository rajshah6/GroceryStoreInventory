/*
 * Name: Raj Shah
 * Date: Aug 11, 2023
 * Course: ICS4UE
 * Description: This program will act as a grocery store, where the user can 
 * add and save food items into a large text file, that can be manually accessed.
 * The items will be stored into an array with a custom type using a class. User
 * can also access the items using the SKU or Name of item. The inventory.txt file
 * is read from inside the main method, this is the code that runs first. Then, once the
 * buttons are clicked, the file is written to, etc.
 */

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

public class GroceryStore extends javax.swing.JFrame {

    public GroceryStore() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        userName = new javax.swing.JTextField();
        userSku = new javax.swing.JTextField();
        userQuantity = new javax.swing.JTextField();
        userMinQuantity = new javax.swing.JTextField();
        userPrice = new javax.swing.JTextField();
        userMarkupPercent = new javax.swing.JTextField();
        userDiscountPercent = new javax.swing.JTextField();
        btnFindUsingSku = new javax.swing.JButton();
        btnFindUsingName = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        btnAdd = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        outputSku = new javax.swing.JTextField();
        outputName = new javax.swing.JTextField();
        outputCategory = new javax.swing.JTextField();
        outputQuantity = new javax.swing.JTextField();
        outputMinQuantity = new javax.swing.JTextField();
        outputVendorPrice = new javax.swing.JTextField();
        outputMarkupPercent = new javax.swing.JTextField();
        outputRegularPrice = new javax.swing.JTextField();
        outputCurrentDiscount = new javax.swing.JTextField();
        outputCurrentPrice = new javax.swing.JTextField();
        btnExit = new javax.swing.JButton();
        errorBox = new javax.swing.JTextField();
        userCategory = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Grocery Store Inventory");

        jLabel1.setFont(new java.awt.Font("Hiragino Sans GB", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 153));
        jLabel1.setText("Grocery Store Inventory");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel2.setText("SKU: ");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel3.setText("Name:");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel4.setText("Category:");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel5.setText("Quantity:");

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel6.setText("Minimum Quantity:");

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel7.setText("Vendor Price:");

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel8.setText("Markup Percentage:");

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel9.setText("Current Discount Percentage:");

        userName.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N

        userSku.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N

        userQuantity.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N

        userMinQuantity.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N

        userPrice.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N

        userMarkupPercent.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N

        userDiscountPercent.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N

        btnFindUsingSku.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        btnFindUsingSku.setText("Find Using SKU");
        btnFindUsingSku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindUsingSkuActionPerformed(evt);
            }
        });

        btnFindUsingName.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        btnFindUsingName.setText("Find Using Name");
        btnFindUsingName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindUsingNameActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("Please write SKU in this format:\nABC-1234\n\nYou can use the SKU or the name to\nfind the item.\n\nYou do not need the SKU to add\na new item to the inventory, but\nall other fields are required.\n\nWhen you click the Add button,\nthe info entered will be automatically \nsaved into the inventory. You may \nalso press the Save button to save.");
        jScrollPane1.setViewportView(jTextArea1);

        btnAdd.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel10.setText("SKU                       Name                          Category                    Quantity               Minimum Quantity");

        jLabel11.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel11.setText("Vendor Price             Markup %             Regular Price             Current Discount             Current Price");

        outputSku.setEditable(false);
        outputSku.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        outputSku.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        outputName.setEditable(false);
        outputName.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        outputName.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        outputCategory.setEditable(false);
        outputCategory.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        outputCategory.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        outputQuantity.setEditable(false);
        outputQuantity.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        outputQuantity.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        outputMinQuantity.setEditable(false);
        outputMinQuantity.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        outputMinQuantity.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        outputVendorPrice.setEditable(false);
        outputVendorPrice.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        outputVendorPrice.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        outputMarkupPercent.setEditable(false);
        outputMarkupPercent.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        outputMarkupPercent.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        outputRegularPrice.setEditable(false);
        outputRegularPrice.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        outputRegularPrice.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        outputCurrentDiscount.setEditable(false);
        outputCurrentDiscount.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        outputCurrentDiscount.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        outputCurrentPrice.setEditable(false);
        outputCurrentPrice.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        outputCurrentPrice.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnExit.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        errorBox.setEditable(false);
        errorBox.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        errorBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        userCategory.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        userCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FRUIT", "VEGETABLE", "MEAT" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addComponent(jSeparator2)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 817, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(259, 259, 259)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(outputSku, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(outputName, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(outputCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(outputQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addComponent(outputMinQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(outputVendorPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(outputMarkupPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56)
                                .addComponent(outputRegularPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(84, 84, 84)
                                .addComponent(outputCurrentDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(87, 87, 87)
                                .addComponent(outputCurrentPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 817, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(errorBox, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(58, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(91, 91, 91)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(userDiscountPercent)
                    .addComponent(userMarkupPercent)
                    .addComponent(userPrice)
                    .addComponent(userMinQuantity)
                    .addComponent(userQuantity)
                    .addComponent(userSku)
                    .addComponent(userName)
                    .addComponent(userCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnFindUsingName, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                            .addComponent(btnFindUsingSku, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(84, 84, 84))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addGap(62, 62, 62)
                                .addComponent(btnSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnExit))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addGap(39, 39, 39)
                .addComponent(btnFindUsingSku)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(userSku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(userCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(userQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(userMinQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(userPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(userMarkupPercent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(userDiscountPercent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(btnFindUsingName)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAdd)
                            .addComponent(btnExit))
                        .addGap(34, 34, 34)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(outputSku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outputName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outputCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outputQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outputMinQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(outputVendorPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outputMarkupPercent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outputRegularPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outputCurrentDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outputCurrentPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(errorBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    static ArrayList<Item> grocerys = new ArrayList<>(); // initialize array list of type Item. It is declared as static to access it from the main method
    
    // static method to check if user inputted SKU is in the correct format (ABC-1234)
    // this will be called later and the boolean returned will tell if the SKU is correct or not
    public static boolean correctSKUInput(String sku) {
        
        if (sku.length() != 8) { // check if SKU is in the correct length
            return false;
        }
        
        for (int i = 0; i < 8; i++) { // iterate through string
            
            if (i >= 0 && i <= 2) { // iterate first 3 characters
                
                char c = sku.charAt(i); // store each character
                if (!(c >= 'A' && c <= 'Z')) { // check if character is not a letter
                    return false;
                    
                }
            }
            
            else if (i == 3) { // Check for "-"
                
                if (sku.charAt(i) != '-') {
                    return false;
                }
            }
            
            else if (i >= 4 && i <= 7) { // iterate last 4 characters
                
                char c = sku.charAt((i));
                if (!(c >= '0' && c <= '9')) { // check if character is not a number
                    return false;
                    
                }
            } 
        }
        
        // otherwise return true to tell program that the user inputted the SKU correctly
        return true;
        
    }
    
    // static method to count how many fruits, vegetables, and meat items there are initially, so that the program knows where to add new ones
    // this will be called inside the addBtn method
    public static int countItemsOfCategory(String category) {
        switch (category) {
            case "FRUIT":
                // count number of initial fruits
                int numFruits = 0;
                
                for (Item grocery : grocerys) { // get elements from array
                    if (grocery.getCategory().equals("FRUIT")) {
                        numFruits++; // increment counter if category matches
                    }
                }
                
                return numFruits;
                
            case "VEGETABLE":
                // count number of initial vegetables
                int numVeg = 0;
                
                for (Item grocery : grocerys) { // get elements from array
                    if (grocery.getCategory().equals("VEGETABLE")) {
                        numVeg++; // increment counter if category matches
                    }
                }
                
                return numVeg;
                
            default:
                // count number of initial meat items
                int numMeat = 0;
                
                for (Item grocery : grocerys) { // get elements from array
                    if (grocery.getCategory().equals("MEAT")) {
                        numMeat++; // increment counter if category matches
                    }
                }
                
                return numMeat;
        }
    }
    
    // static method to create the SKU for each category
    // this will be called inside the addBtn method
    public static String createSKU(String category, int fruitIndex, int vegIndex, int meatIndex) {
        String sku;
                
        switch (category) { 
                
            // create sku for fruits category
            case "FRUIT":
                if (fruitIndex < 10){
                    sku = "FRU-000" + (fruitIndex+1); // put sku index in ones place

                } else if (fruitIndex < 100) {
                    sku = "FRU-00" + (fruitIndex+1); // put sku index in tens place

                } else if (fruitIndex < 1000) {
                    sku = "FRU-0" + (fruitIndex+1); // put sku index in hundreds place

                } else { 
                    sku = "FRU-" + (fruitIndex+1); // put sku index in thousands place
                }

                break; // exit switch case

            // create sku for vegetable category
            case "VEGETABLE":
                if (vegIndex < 10){
                    sku = "VEG-000" + (vegIndex+1); // put sku index in ones place

                } else if (vegIndex < 100) {
                    sku = "VEG-00" + (vegIndex+1); // put sku index in tens place

                } else if (vegIndex < 1000) {
                    sku = "VEG-0" + (vegIndex+1); // put sku index in hundreds place

                } else { 
                    sku = "VEG-" + (vegIndex+1); // put sku index in thousands place
                }

                break; // exit switch case

            // create sku for meat category
            default:
                if (meatIndex < 10){
                    sku = "MEA-000" + (meatIndex+1); // put sku index in ones place

                } else if (meatIndex < 100) {
                    sku = "MEA-00" + (meatIndex+1); // put sku index in tens place

                } else if (meatIndex < 1000) {
                    sku = "MEA-0" + (meatIndex+1); // put sku index in hundreds place

                } else { 
                    sku = "MEA-" + (meatIndex+1); // put sku index in thousands place
                }

                break; // exit switch case
        }
        
        return sku;
    }
        
    
    private void btnFindUsingSkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindUsingSkuActionPerformed
        // TODO add your handling code here:
        
        String SKU = userSku.getText();  // get sku input from user
        
        if (correctSKUInput(SKU) == false) { // call method to check for correct input, then set errorBox text
            errorBox.setText("SKU is in the wrong format, please try again.");
            return; // exit the method
        }
           
        for (Item grocery : grocerys) { // get elements from array
            
            if (grocery.getSku().equals(SKU)) { // check if SKU is in array
                // if so, display all information 
                outputSku.setText(grocery.getSku()); // set SKU
                outputName.setText(grocery.getName()); // set Name
                outputCategory.setText(grocery.getCategory()); // set Category
                outputQuantity.setText(grocery.getQuantity() + ""); // set Quantity and convert to String to be printable
                outputMinQuantity.setText(grocery.getMinimumQuantity() + ""); // set Minimum Quantity
                outputVendorPrice.setText(grocery.getVendorPrice() + ""); // set Vendor Price
                outputMarkupPercent.setText(grocery.getMarkupPercentage() + ""); // set Markup Percent
                outputRegularPrice.setText(grocery.getRegularPrice() + ""); // set Regular Price
                outputCurrentDiscount.setText(grocery.getCurrentDiscount() + ""); // set Current Discount
                outputCurrentPrice.setText(grocery.getCurrentPrice() + ""); // set Current Price
                
                errorBox.setText(""); // reset error box
                return;  // exit the method 
            }
        }
        
        errorBox.setText("SKU does not exist, please try again."); // otherwise, print error message
    }//GEN-LAST:event_btnFindUsingSkuActionPerformed

    private void btnFindUsingNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindUsingNameActionPerformed
        // TODO add your handling code here:
        
        String name = userName.getText();  // get name input from user
           
        for (Item grocery : grocerys) { // get elements from array
            
            if (grocery.getName().equals(name)) { // check if name is in array
                // if so, display all information 
                outputSku.setText(grocery.getSku()); // set SKU
                outputName.setText(grocery.getName()); // set Name
                outputCategory.setText(grocery.getCategory()); // set Category
                outputQuantity.setText(grocery.getQuantity() + ""); // set Quantity and convert to String to be printable
                outputMinQuantity.setText(grocery.getMinimumQuantity() + ""); // set Minimum Quantity
                outputVendorPrice.setText(grocery.getVendorPrice() + ""); // set Vendor Price
                outputMarkupPercent.setText(grocery.getMarkupPercentage() + ""); // set Markup Percent
                outputRegularPrice.setText(grocery.getRegularPrice() + ""); // set Regular Price
                outputCurrentDiscount.setText(grocery.getCurrentDiscount() + ""); // set Current Discount
                outputCurrentPrice.setText(grocery.getCurrentPrice() + ""); // set Current Price
                
                errorBox.setText(""); // reset error box
                return;  // exit the method 
            }
        }
        
        errorBox.setText("Name does not exist, please try again."); // otherwise, print error message
    }//GEN-LAST:event_btnFindUsingNameActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        
        errorBox.setText(""); // reset error box
        
        // get all of user's inputs
        String name = userName.getText();
        String category = (String)userCategory.getSelectedItem();
        
        if (name.length() > 20) {
            errorBox.setText("Name should be less than 20 characters"); // display error message
            return; // exit the method
        }
        
        // check if name already exists
        for (Item grocery : grocerys) { // get elements from array
            if (grocery.getName().equals(name)) {
                errorBox.setText("Name already exists."); 
                return; // exit the method
            }
        }
        
        // these will be later converted into doubles and ints
        String quantity_string = userQuantity.getText(); 
        String minQuantity_string = userMinQuantity.getText();
        String vendorPrice_string = userPrice.getText();
        String markupPercent_string = userMarkupPercent.getText();
        String discountPercent_string = userDiscountPercent.getText();
        
        try { // check for correct user input
            int quantity = Integer.parseInt(quantity_string); // convert to int
            int minQuantity = Integer.parseInt(minQuantity_string);
            
            double vendorPrice = Double.parseDouble(vendorPrice_string); // convert to double
            double markupPercent = Double.parseDouble(markupPercent_string);
            double discountPercent = Double.parseDouble(discountPercent_string);
            
            // check if quantity is positive
            if (quantity < 0) {
                errorBox.setText("Quantity must be positive.");
                return; // exit the method
            }
            
            // check if min quantity is positive
            else if (minQuantity < 0) {
                errorBox.setText("Minimum quantity must be positive.");
                return; // exit the method
            }
            
            // check if vendor price is positive
            else if (vendorPrice < 0) {
                errorBox.setText("Vendor price must be positive.");
                return; // exit the method
            }
            
            // check if markup percent is between 0-100
            else if (markupPercent < 0 || markupPercent > 100) {
                errorBox.setText("Markup percent must be between 0-100.");
                return; // exit the method
            }
            
            // check if discount percent is between 0-100
            else if (discountPercent < 0 || discountPercent > 100) {
                errorBox.setText("Discount percent must be between 0-100.");
                return; // exit the method
            }
            
            // get index for sku for each type of category by calling the method. this is the count of the initial items of that category in inventory.txt
            int fruitIndex = countItemsOfCategory("FRUIT");
            int vegIndex = countItemsOfCategory("VEGETABLE"); 
            int meatIndex = countItemsOfCategory("MEAT"); 
            
            // call method and create the sku depending on the category
            String sku = createSKU(category, fruitIndex, vegIndex, meatIndex);
            
            // calculate the regular price
            double regularPrice = vendorPrice + vendorPrice*(markupPercent/100);
            
            // calculate the current price
            double currentPrice = ((100 - discountPercent)/100) * regularPrice;
            
            // add all info to an object of type Item
            Item newItem = new Item(sku, name, category, quantity, minQuantity, vendorPrice, markupPercent, regularPrice, discountPercent, currentPrice);
            
            // add object to array list at correct index
            switch (category) { // check which category to add in
                
            // fruits category
            case "FRUIT":
                grocerys.add(fruitIndex, newItem); // add at the end of the fruits list

                break; // exit switch case

            // vegetable category
            case "VEGETABLE":
                System.out.println(vegIndex);
                grocerys.add(fruitIndex + vegIndex,newItem); // add at the end of the vegetable list

                break; // exit switch case

            // meat category
            default:
                grocerys.add(fruitIndex + vegIndex + meatIndex,newItem); // add at the end of the meat list

                break; // exit switch case
            }
            
            // overwrite and save to the inventory.txt file
            try {
                BufferedWriter writer = new BufferedWriter(new FileWriter("src//inventory.txt")); // create BufferedWriter object to write to inventory.txt
                
                for (Item grocery : grocerys) { // get elements from array
                    writer.write(grocery + "\n"); // add from array to file
                }
                
                writer.close(); // closes the writer object
                
            } catch (IOException e) {
                 e.printStackTrace();
            }
            
            errorBox.setText("Added and saved sucessfully!");
            
        } catch (Exception e) { // inform user about incorrect input
            errorBox.setText("Incorrect input. Ensure to input numbers for the required boxes.");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        
        // overwrite and save to the inventory.txt file
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("src//inventory.txt")); // create BufferedWriter object to write to inventory.txt

            for (Item grocery : grocerys) { // get elements from array
                writer.write(grocery + "\n"); // add from array to file
            }

            writer.close(); // closes the writer object
            
        } catch (IOException e) {
             e.printStackTrace();
        }
        
        errorBox.setText("Saved sucessfully!");
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0); // exit the program
    }//GEN-LAST:event_btnExitActionPerformed

    public static void main(String args[]) {

        try {
            
            BufferedReader reader = new BufferedReader(new FileReader("src//inventory.txt")); // create BufferedReader object to read inventory.txt
            String line = reader.readLine(); // storing each line in the string variable

            while (line != null) { // iterate through all lines until reach end of file
                String[] lineArray = line.split(","); // split each line by the comma to access each field seperatly
                
                // initalize object of type Item with each field
                Item item = new Item(
                        lineArray[0], // SKU
                        lineArray[1], // Name
                        lineArray[2], // Category
                        Integer.parseInt(lineArray[3]), // Quantity, convert to int
                        Integer.parseInt(lineArray[4]), // Min Quantity
                        Double.parseDouble(lineArray[5]), // Vendor Price, convert to double
                        Double.parseDouble(lineArray[6]), // Markup Percentage
                        Double.parseDouble(lineArray[7]), // Regular Price
                        Double.parseDouble(lineArray[8]), // Current Discount
                        Double.parseDouble(lineArray[9])); // Current Price
                
                grocerys.add(item); // add to array list
                
                line = reader.readLine(); // read next line
            }

            reader.close(); // closes the reader object
            
        } catch (IOException e) {
                e.printStackTrace();
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GroceryStore().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnFindUsingName;
    private javax.swing.JButton btnFindUsingSku;
    private javax.swing.JButton btnSave;
    private javax.swing.JTextField errorBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField outputCategory;
    private javax.swing.JTextField outputCurrentDiscount;
    private javax.swing.JTextField outputCurrentPrice;
    private javax.swing.JTextField outputMarkupPercent;
    private javax.swing.JTextField outputMinQuantity;
    private javax.swing.JTextField outputName;
    private javax.swing.JTextField outputQuantity;
    private javax.swing.JTextField outputRegularPrice;
    private javax.swing.JTextField outputSku;
    private javax.swing.JTextField outputVendorPrice;
    private javax.swing.JComboBox<String> userCategory;
    private javax.swing.JTextField userDiscountPercent;
    private javax.swing.JTextField userMarkupPercent;
    private javax.swing.JTextField userMinQuantity;
    private javax.swing.JTextField userName;
    private javax.swing.JTextField userPrice;
    private javax.swing.JTextField userQuantity;
    private javax.swing.JTextField userSku;
    // End of variables declaration//GEN-END:variables
}
